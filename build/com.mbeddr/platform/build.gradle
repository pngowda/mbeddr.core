def script_test_mbeddrPlatform = new File(scriptsBasePath + "/com.mbeddr.platform/" + "build-ts-tests.xml")

if (project.skipResolveMps) {
    task resolve_mps {
        doLast {
            logger.info "MPS resolution skipped"
        }
    }
} else {
    task resolve_mps(type: Copy) {
        dependsOn configurations.mps
        from {
            configurations.mps.resolve().collect { zipTree(it) }
        }
        into mpsHomeDir
    }
}

ext.dependencyRepositories = [
        'https://projects.itemis.de/nexus/content/repositories/de.itemis.mps.build'
]

configurations {
    mpsArtifacts
}

dependencies {
	mpsArtifacts "de.itemis.mps:build:$mpsBuildPluginNumber"
}

task resolveMpsArtifacts() {
    doLast {
        copy {
            from {
                    configurations.mpsArtifacts.resolve().collect { zipTree(it) }
                 }
            into artifactsDir
        }
    }
}

task build_allScripts(type: ExecuteMPSBuildLanguages, dependsOn: [resolve_mps, resolveMpsArtifacts]) {
    script rootProject.file('build/com.mbeddr.allScripts/build.xml')
	cmdargs scriptArgs()
}

task copy_allScripts(type: Copy, dependsOn: build_allScripts) {
    from "$rootDir/build"
    from "$rootDir/code/plugins"
    into "$rootDir/scripts"
    include "*/*.xml"
}

task publish_allScripts(type: Zip, dependsOn: build_allScripts) {
    archiveName 'com.mbeddr.allScripts.build.zip'
    from artifactsDir
    include "com.mbeddr.allScripts.build/**"
}


task build_sl_all(type: ExecuteMPSBuildLanguages, dependsOn: copy_allScripts) {
    script scriptFile('sl-all/build.xml')
	cmdargs scriptArgs()
}

task copy_sl_all_nativelibs(type: Copy, dependsOn: build_sl_all) {
    from "$rootDir/artifacts/mps-sl-all/"
    include "de.itemis.mps.nativelibs.loader/"
    into "$mpsHomeDir/plugins"
}


task install_sl_all_nativelibs(type: Copy, dependsOn: build_sl_all) {
    from "$rootDir/artifacts/mps-sl-all/"
    include "de.itemis.mps.nativelibs.loader/"
    into "$mpsInstallationDir/plugins"
}



task build_platform(type: ExecuteMPSBuildLanguages, dependsOn: copy_sl_all_nativelibs) {
    script scriptFile('com.mbeddr.platform/build.xml')
	cmdargs scriptArgs()
}

task test_mbeddr_platform(type: ExecuteMPSTestLanguages, dependsOn: build_platform) {
    script script_test_mbeddrPlatform
	cmdargs scriptArgs()
	
}

task build_platform_distribution(type: ExecuteMPSBuildLanguages, dependsOn: [build_platform, test_mbeddr_platform]) {
    script scriptFile('com.mbeddr.platform/build-distribution.xml')
	cmdargs scriptArgs()

    // Support incremental build
    inputs.file(script)
    inputs.dir("$rootDir/artifacts/mps-sl-all")
    inputs.dir("$rootDir/artifacts/com.mbeddr.platform")
    outputs.dir("$rootDir/artifacts/com.mbeddr.platform.distribution")
}

task publish_mbeddrPlatform(type: Zip, dependsOn: test_mbeddr_platform) {
    archiveName 'com.mbeddr.platform.zip'
    from artifactsDir
    include "com.mbeddr.platform/**"
}

task publishMbeddrPlatformToLocal(dependsOn: ['publishMbeddrAllScriptsPublicationToMavenLocal', 'publishMbeddrPlatformPublicationToMavenLocal'])

publishing {
    publications {
        mbeddrPlatform(MavenPublication) {
            groupId 'com.mbeddr'
            artifactId 'platform'
            version mbeddrBuildNumber
            artifact publish_mbeddrPlatform
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                    dependencyNode.appendNode('scope', 'provided')
                }
            }
        }
        mbeddrAllScripts(MavenPublication) {
            groupId 'com.mbeddr'
            artifactId 'allScripts'
            version mbeddrBuildNumber
            artifact publish_allScripts
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                    dependencyNode.appendNode('scope', 'provided')
                }
            }
        }
    }
}
